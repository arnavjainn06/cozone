<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>cozone join</title>

    <script>
        const ROOM = "<%= room %>"
        const NAME = "<%= name %>"
        console.log(ROOM, NAME);
    </script>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700&display=swap" rel="stylesheet">

    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>

    <style>
        * {
            font-family: 'Poppins', sans-serif;
        }

        body {
            background-color: #111;
            width: 100vw;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        .contextBox {
            background: #151515;
            box-shadow: 0px 4px 27px 6px rgba(0, 0, 0, 0.15);
            border-radius: 15px;
            width: fit-content;
            padding: 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 45%;
            border: 1px solid #292929;
            box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.192);
            position: relative;
            overflow: visible;
            height: 87%;
        }

        .contextBox input {
            width: 96%;
            background: #1B1B1B;
            height: 36px;
            border: 1px solid #292929;
            box-sizing: border-box;
            border-radius: 8px;
            text-indent: 6px;
            margin: 4px 0px;
            outline: none;
            color: white;
        }

        .contextBox h2 {
            color: white !important;
            text-align: center;
            margin: 5px 5px;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .buttonRow {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 96%;
            margin: 14px 0px;
        }

        .classic {
            /* width: 100%; */
            border: 1px solid #292929;
            box-sizing: border-box;
            height: 32px;
            width: 170px;
            border-radius: 8px;
            cursor: pointer;
            transition: .25s;
        }

        .classic:hover {
            opacity: 0.6;
            transition: .25s;
        }

        .dismiss {
            background: #1B1B1B;
            color: white;
        }

        .enable {
            background: orange;
            color: black;
            font-weight: 500;
        }

        .contextHeader {
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
            width: 100%;
            background-color: #1f1f1f98;
            position: absolute;
            top: 0;
            left: 0;
            border-top-left-radius: 15px;
            border-top-right-radius: 15px;
            border-bottom: 1px solid #292929;
            z-index: 3;
            backdrop-filter: blur(25px);
            transition: height 0.4s;
        }

        ion-icon {
            color: orange;
            font-size: 22px;
            cursor: pointer;
            transition: .25s;
        }

        .back-icon {
            margin-left: 14px;
            margin-top: 14px;
        }

        .info-icon {
            margin-right: 14px;
            margin-top: 14px;
        }

        ion-icon:hover {
            opacity: 0.5;
            transition: .25s;
        }
        
        .contextHeader .centre {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: white;
            margin-top: 14px;
        }

        .centre h3 {
            margin: 0;
            font-weight: 500;
            margin-bottom: 6px;
            color: #4f4f4f;
            font-size: 13px;
        }

        .centre img {
            width: 40px;
            height: 40px;
            object-fit: cover;
            margin-bottom: 5px;
            border-radius: 50%;
        }

        .contextControl {
            display: flex;
            align-items: center;
            justify-content: space-evenly;
            width: 100%;
            background-color: #1f1f1f98;
            position: absolute;
            bottom: 0;
            left: 0;
            border-bottom-left-radius: 15px;
            border-bottom-right-radius: 15px;
            border-top: 1px solid #292929;
            z-index: 3;
            padding-top: 10px;
            backdrop-filter: blur(25px);
        }

        .contextControl input {
            margin-left: 14px;
            margin-bottom: 14px;
            height: 40px;
            border-radius: 10px;
            text-indent: 8px;
        }

        .opacific {
            background-color: transparent;
            border: none;
            outline: none;
            color: orange;
            cursor: pointer;
            font-weight: 500;
            transition: .25s;
            font-size: 15px;
        }

        .contextControl .opacific {
            margin-bottom: 14px;
            margin-right: 14px;
            margin-left: 10px;
        }

        .opacific:hover {
            opacity: 0.5;
            transition: .25s;
        }

        .contextChat {
            background-color: transparent;
            position: absolute;
            left: 0;
            top: 0;
            border-radius: 15px;
            width: 100%;
            height: 100%;
            /* display: flex; */
            display: inline-block;
            align-items: flex-end;
            flex-direction: column;
            overflow: scroll;
            justify-content: end;
        }

        .contextChat h1 {
            color: orange;
        }

        .message:last-child {
            margin-bottom: 80px;
            /* background-color: rgb(145, 145, 145); */
            height: fit-content;
            position: relative;
        }

        .message:first-child {
            margin-top: 120px;
        }

        .mine .sender {
            display: none;
        }

        @keyframes animator {
            from {
                transform: translateY(20px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        @keyframes animatorInverse {
            from {
                opacity: 1;
            }
            to {
                opacity: 0;
            }
        }

        .message {
            max-width: 42%;
            margin: 5px 0px;
            position: relative;
        }

        ::-webkit-scrollbar {
            display: none;
        }

        .mine {
            background-color: orange;
            padding: 5px 10px;
            border-radius: 9px;
            margin-left: auto;
            margin-right: 14px;
            display: flex;
            width: fit-content;
            align-items: center;
            /* animation: animator 0.8s; */
        }

        .message .text {
            font-weight: 500;
            font-size: 14px;
            margin: 0;
        }

        .mine .timestamp {
            position: absolute;
            left: -45px;
            color: rgba(108, 108, 108, 0.864);
            font-size: 12px;
        }

        .other {
            background-color: rgb(39, 39, 39);
            padding: 7px 10px;
            border-radius: 10px;
            margin-right: auto;
            margin-left: 14px;
            display: flex;
            color: white;
            align-items: center;
            width: fit-content;
            position: relative;
        }

        .other .info {
            position: absolute;
            /* right: -5%; */
            font-size: 13px;
            display: flex;
            align-items: center;
            margin-left: 100%;
        }

        .info .sender {
            color: white;
            font-size: 11px;
            font-weight: 400;
            margin-right: 5px;
        }

        .info .timestamp {
            color: gray;
            font-size: 11px;
            margin-left: 5px;
        }

        .info {
            color: rgb(61, 61, 61);
        }

        .other .text {
            font-weight: 300;
        }

        .global {
            background-color: rgb(10, 10, 10);
            font-size: 12px;
            font-weight: 200;
            width: fit-content;
            padding: 3px 9px;
            border-radius: 7px;
            color: white;
            margin: 15px auto;
            border: 1px solid #292929;
        }

        small {
            color: gray;
            font-weight: 400;
            font-size: 9px;
            margin: 0;
        }

        #small-holder {
            transform: translateY(-10px);
            /* height: 4px; */
        }

        .popup {
            position: absolute;
            background-color: rgb(23, 23, 23);
            color: white;
            box-shadow: rgba(0, 0, 0, 0.25) 0px 25px 50px -12px;
            right: -90px;
            width: 200px;
            top: 56px;
            padding: 10px 15px;
            border-radius: 10px;
            border: 1px solid #292929;
            display: none;
            animation: animator 0.5s;
        }

        .popup h3 {
            margin: 0;
            font-weight: 500;
            font-size: 17px;
            text-align: center;
            margin-top: 10px;
        }

        .pars {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            margin: 10px 0px;
        }

        .arrow-up {
            width: 0; 
            height: 0; 
            border-left: 13px solid transparent;
            border-right: 13px solid transparent;
            
            border-bottom: 13px solid rgb(23, 23, 23);
            box-shadow: rgba(0, 0, 0, 0.25) 0px 25px 50px -12px;
            position: absolute;
            top: -10px;
            z-index: 20;
            z-index: 2;
            display: flex;
            display: block;
            left: 0;
            right: 0;
            /* margin-left: 2px; */
            margin-left: auto;
            margin-right: auto;
        }

        .pars li {
            list-style: none;
            color: rgb(57, 57, 57);
        }

        .theme-by-text {
            color: orange;
        }

        .popup .opacific {
            text-align: center;
            font-size: 14px;
            font-weight: 400;
            display: flex;
            margin: auto;
            align-items: center;
        }

        .opacific ion-icon {
            font-size: 15px;
            margin-right: 5px;
        }
</style>

</head>
<body>
    <div class="contextBox">
        <div class="contextHeader">
            <ion-icon onclick="leave()" name="chevron-back-outline" class="back-icon"></ion-icon>
            <div class="centre" id="centre">
                <img src="https://picsum.photos/200" alt="logo">
                <h3 id="chat-title">group name</h3>
                <div id="small-holder" class="collapsible"></div>
            </div>
            <ion-icon name="information-circle-outline" class="info-icon"></ion-icon>
            <div class="popup">
                <div class="arrow-up"></div>
                <h3 id="pars-num">Participants</h3>
                <div class="pars" id="pars">
                </div>
                <button style="text-align: center;" class="opacific" id="copy-btn"> <ion-icon name="copy-outline"></ion-icon> <span>Copy Invite Link</span></button>
            </div>
        </div>
        <div class="contextControl">
            <input id="inputMain" type="text" placeholder="Send a message">
            <button class="opacific">Send</button>
        </div>
        
        <div class="contextChat" id="contextChat"></div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <script>
        const socket = io("/");
        socket.emit("join-room", ROOM, NAME);

        const chatTitle = document.getElementById("chat-title");
        const parsNum = document.getElementById("pars-num");

        chatTitle.innerText = ROOM;

        console.log(NAME);

        function getTime() {
            let time = new Date();
            hour = time.getHours() < 10 ? `0${time.getHours()}` : `${time.getHours()}`;
            mins =
                time.getMinutes() < 10
                    ? `0${time.getMinutes()}`
                    : `${time.getMinutes()}`;

            return `${hour}:${mins}`;
        }

        const inputMain = document.getElementById("inputMain");
        const contextChat = document.getElementById("contextChat");

        function leave() {
            socket.emit("leaving", NAME);
            window.location.pathname = "/create";
        }

        const copyBtn = document.getElementById("copy-btn");

        copyBtn.addEventListener("click", () => {
            navigator.clipboard.writeText(window.location.href);
            copyBtn.innerHTML =
            `
            <ion-icon style="color: green" name="checkmark-circle-outline"></ion-icon>
            <span style="color: green">Copied</span>
            `;

            setTimeout(() => {
                copyBtn.innerHTML =
                `
                <button style="text-align: center;" class="opacific" id="copy-btn"> <ion-icon name="copy-outline"></ion-icon> <span>Copy Invite Link</span></button>
                `;
            }, 3000)
        });

        inputMain.addEventListener("keypress", (e) => {
            if (e.which === 13 || e.keyCode === 13) {
                if (e.target.value !== "")  {
                    socket.emit("send", {
                        timestamp: getTime(),
                        sender: NAME,
                        text: e.target.value
                    });
                    e.target.value = '';
                }
            }
        });

        socket.on("new-connection", (name) => {
            if (name !== NAME) {
                contextChat.innerHTML += 
                `
                <div class="global message">
                    <span>${name} has joined the chat</span>    
                </div>
                `
            } else {
                contextChat.innerHTML += 
                `
                <div class="global message">
                    <span>You joined the chat</span>    
                </div>
                `
            }
        });

        socket.on("disconnection", (name) => {
            contextChat.innerHTML += 
            `
            <div class="global message">
                <span>${name} has left the chat</span>    
            </div>
            `
        });

        socket.on("message", (data) => {
            if (data.sender !== NAME) {
                contextChat.innerHTML += 
                `
                <div class="message other">
                    <div class="info">
                        <div class="sender">${data.sender} </div> | <div class="timestamp"> ${data.timestamp}</div>
                    </div>
                    <p class="text">
                        ${data.text}
                    </p>
                </div>
                `
            } else {
                contextChat.innerHTML +=
                `
                <div class="message mine">
                    <div class="sender">${data.sender}</div>
                    <div class="timestamp">${data.timestamp}</div>
                    <p class="text">${data.text}</p>
                </div>
                `
            }
        });

        let timer;
        const waitTime = 1000;

        socket.on("typing-in", (sender) => {
            if (sender !== NAME) {
                chatTitle.style.marginBottom = "6px";
                document.getElementById("small-holder").innerHTML = 
                `
                <small>${sender} is typing...</small>
                `;
            }
        });

        socket.on("hide-typing", () => {
            const hint = document.getElementsByClassName("typer");
            chatTitle.style.marginBottom = "14px";

            while (hint[0]) {
                hint[0].parentElement.removeChild(hint[0]);
            }

            document.getElementById("small-holder").innerHTML = '';
        });

        inputMain.addEventListener("keypress", () => {
            socket.emit("typing-out", NAME);
            window.clearTimeout(timer);
        });

        inputMain.addEventListener("keyup", (e) => {
            window.clearTimeout(timer); // prevent errant multiple timeouts from being generated
            timer = window.setTimeout(() => {
                socket.emit("typing-stopped");
            }, waitTime);
        });

        let infoIcon = document.querySelector(".info-icon");
        let tooltip = document.querySelector(".popup");

        infoIcon.addEventListener("click", () => {
            if (tooltip.style.display !== "block") {
                tooltip.style.display = "block";
                infoIcon.setAttribute("name", "close-circle-outline");
            } else {
                tooltip.style.animation = "animatorInverse 0.5s";
                setTimeout(() => {
                    tooltip.style.display = "none";
                    infoIcon.setAttribute("name", "information-circle-outline");
                    tooltip.style.animation = "animator 0.5s";
                }, 500);
            }
        });

        const pars = document.getElementById("pars");

        socket.on("users", list => {
            parsNum.innerText = `Participants (${list.length})`;
            pars.innerHTML = "";
            list.map((item) => {
                if (item.name !== NAME) {
                    pars.innerHTML +=
                    `
                    <li class="theme-by-text">${item.name}</li>
                    `
                } else {
                    pars.innerHTML +=
                    `
                    <li>You</li>
                    `
                }
            });
            // console.log(list);
        });

    </script>
</body>
</html>